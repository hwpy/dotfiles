#!/usr/bin/env bash
#
# Скрипт для rofi, управляющий NetworkManager через nmcli
#
# Зависимости:
#   nmcli, rofi

# Constants
divider="---------"
goback="Back"

# Проверка, включён ли Wi-Fi
wifi_enabled() {
    nmcli radio wifi | grep -q "enabled"
}

# Включение/выключение Wi-Fi
toggle_wifi() {
    if wifi_enabled; then
        nmcli radio wifi off
    else
        nmcli radio wifi on
  fi
  show_menu
}

# Получить список доступных Wi-Fi сетей (SSID)
get_wifi_networks() {
  nmcli device wifi rescan >/dev/null 2>&1
  # Получаем только SSID, убираем пустые строки и дубли
  nmcli -f SSID device wifi list | tail -n +2 | sed '/^$/d' | sort -u
}

# Проверка, подключены ли к сети
is_connected() {
  local ssid="$1"
  current_ssid=$(nmcli -t -f active,ssid dev wifi | grep '^yes' | cut -d: -f2)
  [[ "$ssid" == "$current_ssid" ]]
}

# Подключение к сети
connect_to_network() {
  local ssid="$1"
  # Проверим, есть ли сохранённое подключение
  if nmcli connection show --active | grep -q "$ssid"; then
      # Уже подключены
      notify-send "NetworkManager" "Уже подключены к $ssid"
  else
      # Попытка подключения (если сеть защищена, rofi не умеет вводить пароль, поэтому подключаемся через nmcli)
      # Запрос пароля (если нужен)
      security=$(nmcli -f SECURITY device wifi list | grep "$ssid" | awk 'NR==1{print $1}')
      if [[ "$security" != "--" ]]; then
          # Запрашиваем пароль через rofi
          password=$(echo "" | rofi -dmenu -p "Пароль для $ssid:")
          if [[ -z "$password" ]]; then
              notify-send "NetworkManager" "Подключение отменено"
              show_menu
              return
          fi
          nmcli device wifi connect "$ssid" password "$password"
      else
          nmcli device wifi connect "$ssid"
      fi
  fi
  show_menu
}

# Отключение от текущей сети
disconnect_wifi() {
  local iface=$(nmcli -t -f DEVICE,TYPE device status | grep wifi | cut -d: -f1)
  nmcli device disconnect "$iface"
  show_menu
}

# Печать статуса для polybar
print_status() {
  if wifi_enabled; then
      # current_ssid=$(nmcli -t -f active,ssid dev wifi | grep '^yes' | cut -d: -f2)
      wifi_interface=$(nmcli -t -f device,type device | grep "wifi" | cut -d: -f1)
      current_ssid=$(nmcli -t -f name,device connection show --active | grep "$wifi_interface" | cut -d: -f1)
      if [[ -n "$current_ssid" ]]; then
          # Иконка Wi-Fi включён и подключено
          # echo "󰖩 $current_ssid"
          echo "󰖩 "
      else
          # Wi-Fi включён, но не подключено
          echo "󱚵 "
      fi
  else
      # Wi-Fi выключен
      echo "󰖪 "
  fi
}

# главное меню
show_menu() {
  if wifi_enabled; then
      wifi_status="Wi-Fi: on"
      # current_ssid=$(nmcli -t -f active,ssid dev wifi | grep '^yes' | cut -d: -f2 | tr -d '\r')
      wifi_interface=$(nmcli -t -f device,type device | grep "wifi" | cut -d: -f1)
      current_ssid=$(nmcli -t -f name,device connection show --active | grep "$wifi_interface" | cut -d: -f1)

      mapfile -t networks_raw < <(get_wifi_networks)
      networks=""
      for ssid in "${networks_raw[@]}"; do
          # Убираем возможные пробелы по краям
          ssid_trimmed="$(echo -e "${ssid}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
          current_ssid_trimmed="$(echo -e "${current_ssid}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"

          if [[ "$ssid_trimmed" == "$current_ssid_trimmed" && -n "$ssid_trimmed" ]]; then
              # Добавляем иконку и подпись для подключённой сети
              networks+="$ssid_trimmed (connected)\n"
          else
              # Показываем остальные сети
              if [[ -n "$ssid_trimmed" ]]; then
                  networks+="$ssid_trimmed\n"
              fi
          fi
      done

      options="${networks}${divider}\nDisconnect\n${wifi_status}\nToggle Wi-Fi\nExit"
  else
      wifi_status="Wi-Fi: off"
      options="${wifi_status}\nToggle Wi-Fi\nExit"
  fi

  chosen="$(echo -e "$options" | rofi -dmenu -p "NetworkManager")"

  case "$chosen" in
      "" | "$divider")
          ;;
      "Exit")
          exit 0
          ;;
      "Toggle Wi-Fi")
          toggle_wifi
          ;;
      "Disconnect")
          disconnect_wifi
          ;;
      *)
          # Убираем иконку и подпись, если выбрана подключённая сеть
          ssid="${ssid// (connected)/}"
          connect_to_network "$ssid"
          ;;
  esac
}

case "$1" in
  --status)
      print_status
      ;;
  *)
      show_menu
      ;;
esac

